import IDisposable from '../../lang/IDisposable';
import ReadOnlySubject from '../../rx/ReadOnlySubject';
import Dimension from '../../video/Dimension';
import EndPoint, { IStream } from '../discovery/EndPoint';
import IPeerConnection from '../../rtc/IPeerConnection';
import ChannelState from './ChannelState';
import { IRtcMonitorStatistic } from '../../rtc/RtcConnectionMonitor';
import { EdgeToken } from '../edgeAuth/EdgeToken';
import { BitsPerSecond, Millisecond } from '../../units/Units';
export default class Channel implements IDisposable {
    private readonly _logger;
    private readonly _tokenContext;
    private readonly _channelContext;
    private readonly _peerConnectionContext;
    private readonly _stateContext;
    private readonly _channelStartTime;
    private readonly _readOnlyVideoElement;
    private readonly _readOnlyToken;
    private readonly _readOnlyPeerConnection;
    private readonly _readOnlyState;
    private readonly _readOnlyAutoMuted;
    private readonly _readOnlyAutoPaused;
    private readonly _readOnlyTokenExpiring;
    private readonly _readOnlyAuthorized;
    private readonly _readOnlyOnline;
    private readonly _readOnlyLoading;
    private readonly _readOnlyPlaying;
    private readonly _readOnlyStandby;
    private readonly _readOnlyStopped;
    private readonly _readOnlyTargetLag;
    private readonly _readOnlyLag;
    private readonly _readOnlyBitrateLimit;
    private readonly _readOnlyResolution;
    private readonly _readOnlyFailureCount;
    private readonly _readOnlyEndPoint;
    private readonly _readOnlyStream;
    private readonly _readOnlyRtcStatistics;
    private readonly _readOnlyMediaStream;
    private _metricsService;
    private readonly _sessionTelemetry;
    private readonly _videoMetaDataChangedHandler;
    constructor(videoElement: HTMLVideoElement, token: string, targetLag?: number);
    get videoElement(): HTMLVideoElement;
    set videoElement(videoElement: HTMLVideoElement);
    private handleVideoMetaDataChanged;
    get token(): EdgeToken;
    set token(token: EdgeToken);
    get peerConnection(): ReadOnlySubject<IPeerConnection>;
    get state(): ReadOnlySubject<ChannelState>;
    get autoMuted(): ReadOnlySubject<boolean>;
    get autoPaused(): ReadOnlySubject<boolean>;
    get tokenExpiring(): ReadOnlySubject<boolean>;
    get authorized(): ReadOnlySubject<boolean>;
    get online(): ReadOnlySubject<boolean>;
    get loading(): ReadOnlySubject<boolean>;
    get playing(): ReadOnlySubject<boolean>;
    get standby(): ReadOnlySubject<boolean>;
    get stopped(): ReadOnlySubject<boolean>;
    get targetLag(): ReadOnlySubject<Millisecond>;
    get lag(): ReadOnlySubject<Millisecond>;
    get bitrateLimit(): number;
    get resolution(): ReadOnlySubject<Dimension>;
    get failureCount(): ReadOnlySubject<number>;
    get endPoint(): ReadOnlySubject<EndPoint>;
    get stream(): ReadOnlySubject<IStream>;
    get streamId(): string;
    get rtcStatistics(): ReadOnlySubject<IRtcMonitorStatistic>;
    get mediaStream(): ReadOnlySubject<MediaStream>;
    setBitrateLimit(bitrateLimit: BitsPerSecond): void;
    clearBitrateLimit(): void;
    updateTargetLag(lag: Millisecond): void;
    stop(reason: string): Promise<void>;
    private processStop;
    resume(): Promise<void>;
    mute(): void;
    unmute(): void;
    dispose(): Promise<void>;
    getUri(token: any): URL;
    start(): Promise<void>;
    private processStart;
    private restartAfterStop;
    play(): Promise<void>;
    private getRetryInterval;
    private handleStreamFailure;
    private cleanUpResources;
    private playMediaStreamInVideoElement;
}
