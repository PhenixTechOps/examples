import Subject from '../rx/Subject';
import ReadOnlySubject from '../rx/ReadOnlySubject';
import IPeerConnectionFactory from '../rtc/IPeerConnectionFactory';
import { LoggingLevelType } from '../logger/Logger';
import { TelemetryLevelType } from '../metrics/MetricsConfiguration';
import MetricsService from '../metrics/MetricsService';
import BrowserDetector from '../dom/BrowserDetector';
import ApplicationActivityMonitor from '../dom/ApplicationActivityMonitor';
import { HlsPlayerType, ShakaType, WebPlayerType } from './streaming/StreamTypes';
interface IInitOptions {
    discoveryUri?: string;
    peerConnectionFactory?: IPeerConnectionFactory;
    telemetryLevel?: TelemetryLevelType;
    loggingLevel?: LoggingLevelType;
    consoleLoggingLevel?: LoggingLevelType;
    automaticallyPlayMediaStream?: boolean;
    automaticallyMuteVideoOnPlayFailure?: boolean;
    webPlayerLoader?: (player: WebPlayerType) => void;
    shakaPlayerLoader?: (player: ShakaType) => void;
    hlsJsLoader?: (player: HlsPlayerType) => void;
}
export default class SDK {
    private static _automaticallyRetryOnFailure;
    private static _automaticallyReconnectPeerConnection;
    private static _automaticallyPlayMediaStream;
    private static _automaticallyMuteVideoOnPlayFailure;
    private static _webPlayerLoader;
    private static _shakaPlayerLoader;
    private static _hlsJsLoader;
    private static _configurationParameterReader;
    private static _applicationActivityMonitor;
    private static _environment;
    private static _telemetryUrl;
    private static _maximalNumberOfPeerConnectionReconnectAttempts;
    private static _telemetryLevel;
    private static _metricsService;
    private static _metricsConfiguration;
    private static readonly _sendLocalCandidates;
    private static readonly _tenancy;
    private static readonly _clientSessionId;
    private static readonly _loadedTimestamp;
    private static readonly _logger;
    private static readonly _initialized;
    private static readonly _peerConnectionFactory;
    private static readonly _readOnlyInitialized;
    private static readonly _readOnlyDiscoveryUri;
    private static readonly _readOnlyPeerConnectionFactory;
    static get pageLoadTime(): number;
    static get sendLocalCandidates(): Subject<boolean>;
    static get tenancy(): Subject<string>;
    static get clientSessionId(): string;
    static get loadedTimestamp(): Date;
    static get initialized(): ReadOnlySubject<boolean>;
    static get discoveryUri(): ReadOnlySubject<string>;
    static get peerConnectionFactory(): ReadOnlySubject<IPeerConnectionFactory>;
    static get automaticRetryOnFailure(): boolean;
    static get automaticallyReconnectPeerConnection(): boolean;
    static get automaticallyPlayMediaStream(): boolean;
    static get automaticallyMuteVideoOnPlayFailure(): boolean;
    static get webPlayerLoader(): (WebPlayerType: any) => void;
    static get shakaPlayerLoader(): (ShakaType: any) => void;
    static get hlsJsLoader(): (HlsPlayerType: any) => void;
    static get metricsService(): MetricsService;
    static get applicationActivityMonitor(): ApplicationActivityMonitor;
    static get telemetryUrl(): Subject<string>;
    static get maximalNumberOfPeerConnectionReconnectAttempts(): number;
    static set maximalNumberOfPeerConnectionReconnectAttempts(retriesAmount: number);
    static get loggingLevel(): LoggingLevelType;
    static get telemetryLevel(): TelemetryLevelType;
    static get browserDetector(): BrowserDetector;
    static applyTelemetryConfiguration(): void;
    static applyMetricsConfiguration(): void;
    static applyAutomaticallyRetryOnFailureFromParameterConfiguration(): void;
    static applyAutomaticallyReconnectPeerConnectionFromParameterConfiguration(): void;
    static applyDiscoveryUriDefaultFromParameterConfiguration(): void;
    static init(options?: IInitOptions): void;
    static dispose(): void;
    static getTelemetryUrl(url: string): string;
    private constructor();
}
export {};
