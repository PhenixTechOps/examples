import Subject from '../../rx/Subject';
import ChannelState from './ChannelState';
import Dimension from '../../video/Dimension';
import EndPoint, { IStream, SubscribeStatus } from '../discovery/EndPoint';
import VideoTelemetry from '../../video/VideoTelemetry';
import { IRtcMonitorStatistic, IRtcStatistic } from '../../rtc/RtcConnectionMonitor';
import DisposableList from '../../lang/DisposableList';
import { BitsPerSecond, Millisecond } from '../../units/Units';
export default class ChannelContext {
    channelInitialization: Date;
    disposables: DisposableList;
    channelDisposables: DisposableList;
    rendererDisposables: DisposableList;
    videoElement: Subject<HTMLVideoElement>;
    state: Subject<ChannelState>;
    autoMuted: Subject<boolean>;
    autoPaused: Subject<boolean>;
    authorized: Subject<boolean>;
    online: Subject<boolean>;
    loading: Subject<boolean>;
    playing: Subject<boolean>;
    standby: Subject<boolean>;
    stopped: Subject<boolean>;
    targetLag: Subject<Millisecond>;
    lag: Subject<Millisecond>;
    bitrateLimit: Subject<BitsPerSecond>;
    resolution: Subject<Dimension>;
    failureCount: Subject<number>;
    endPoint: Subject<EndPoint>;
    stream: Subject<IStream>;
    rtcStatistics: Subject<IRtcMonitorStatistic>;
    videoTelemetry: VideoTelemetry;
    rtcAudioStatistic: IRtcStatistic;
    rtcVideoStatistic: IRtcStatistic;
    clearFailureCountTimeout: number;
    constructor(targetLag: number);
    get streamId(): string;
    applyStatus(status: SubscribeStatus): void;
    applySessionAndStreamPropertiesToVideoElement(): void;
    mapSubscribeStatusToChannelStatus(status: SubscribeStatus): ChannelState;
}
